# -*- coding: utf-8 -*-
"""PercentagePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NW1raar5Lja5YjflO9EYttpEtc6KNFFr

# **The Sparks Foundation - Data Science & Business Analytics Tasks**

# Done by - Jagannath Pal

# TASK-1 => Prediction using Supervised ML

● Predict the percentage of an student based on the no. of study hours.

● This is a simple linear regression task as it involves just 2 variables.

● You can use R, Python, SAS Enterprise Miner or any other tool

● Data can be found at http://bit.ly/w-data

● What will be predicted score if a student studies for 9.25 hrs/ day?

# Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn

"""# Reading the Data"""

df = pd.read_csv('https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv')
df

df.to_csv('percentage.csv')

"""# Understanding the Data"""

df.dtypes

df.shape

df.size

df.columns

df.info()

df.describe()

df.corr()

df.nunique()

df.isnull().sum()

"""# Exploratory Data Analysis"""

import missingno as no
no.bar(df, color='Lightblue')

sns.heatmap(df.isnull(), yticklabels='False', cmap='YlOrRd')

sns.histplot(x=df['Hours'],kde=True,bins=10,color='lightgreen')

plt.figure(figsize=(12,8))
sns.barplot(x=df.Scores,y=df['Hours'],palette='gist_rainbow')
plt.show()

sns.set_palette("Paired")
sns.pairplot(df,hue='Hours', palette='YlOrRd')
plt.show()

sns.pairplot(df)

sns.stripplot(x=df.Scores,y=df['Hours'],palette='magma_r')

sns.heatmap(df.corr(), annot=True, fmt='.2f', square=True, cmap="YlGn")
plt.title("Correaltion", size=10)
plt.show()

"""# Splitting the Data into Dependent and Indpendent variables"""

x = df.iloc[:,:-1].values
y = df.iloc[:,1].values

"""# Training and Testing the Data"""

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)

"""# Linear Regression"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(xtrain, ytrain)

"""## Prediction"""

ypred_train = model.predict(xtrain)
ypred_test = model.predict(xtest)
ypred_test

df1 = pd.DataFrame({'Actual': ytest, 'Predicted': ypred_test})    
df1

"""## Accuracy"""

import sklearn.metrics as metrics
print("Accuracy of training data:", metrics.r2_score(ytrain, ypred_train)*100)
ac = metrics.r2_score(ytest, ypred_test)*100
print("Accuracy of testing data:", ac)

"""## Error"""

print('Mean Absolute Error:', metrics.mean_absolute_error(ytest, ypred))
print('Mean Squared Error:', metrics.mean_squared_error(ytest, ypred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(ytest, ypred)))

"""Our model has accuracy of **96.78%** ~ **97%** which is very good.

# Plotting Training Dataset
"""

plt.scatter(xtrain, ytrain, color='y', marker='+')
plt.plot(xtrain, model.predict(xtrain), 'm--')
plt.title("Best Fit Line for Training Data")
plt.show()

"""# Plotting Testing Dataset"""

plt.scatter(xtest, ytest, color='r', marker='*')
plt.plot(xtest, model.predict(xtest), 'g--')
plt.title("Best Fit Line for Testing Data")
plt.show()

"""# Predicting Values"""

hours = 9.25
score = model.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(score))

"""# Saving the Model"""

import pickle 
pickle.dump(model, open('model.pkl', 'wb'))